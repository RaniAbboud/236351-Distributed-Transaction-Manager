syntax = "proto3";

option java_multiple_files = true;
option java_package = "cs236351.grpcservice";

package cs236351.grpcservice;

/* Basic Types */
message UTxOMsg {
  string address = 1;
  string transaction_id = 2;
}

message TransferMsg {
  string address = 1;
  uint64 coins = 2;
}

message TransactionMsg {
  string transaction_id = 1;
  int64 timestamp = 2;
  string source_address = 3;
  repeated UTxOMsg inputs = 4;
  repeated TransferMsg outputs = 5;
}

message HttpResponse {
  int32 status_code = 1;
  string reason = 2;
}

/* Request Handling - Transaction */
message ReqTransactionMsg {
  repeated UTxOMsg inputs = 3;
  repeated TransferMsg outputs = 4;
}
message RespTransactionMsg {
  HttpResponse http_resp = 1;
  repeated TransactionMsg transaction = 2;
}

/* Request Handling - Coin Transfer */
message ReqCoinTransferMsg {
  string req_id = 1;
  string source_address = 2;
  string target_address = 3;
  uint64 coins = 4;
}

/* Request Handling - List Address Transactions */
message ReqListAddrTransactionsMsg {
  string source_address = 1;
  int32 limit = 2;
}
message RespTransactionListMsg {
  HttpResponse http_resp = 1;
  repeated TransactionMsg transactions = 2;
}

/* Request Handling - List Entire History */
message ReqListEntireHistoryMsg {
  int32 limit = 2;
}

/* Request Handling - List Address UTxO */
message ReqListAddrUTxOMsg {
  string source_address = 1;
}
message RespUnusedUTxOListMsg {
  HttpResponse http_resp = 1;
  repeated UTxOMsg utxos = 2;
  // repeated TransactionMsg transactions = 3;
}

/* Request Handling - Atomic Transaction List */
message ReqAtomicTxListMsg {
  repeated ReqTransactionMsg transactions = 2;
}

/* Transaction History */
message TransactionHistoryMsg {
  repeated TransactionMsg transactions = 1;
}

/* Decision on submitting Atomic Transaction List */
message DecisionMsg {
  repeated HttpResponse http_resp = 2;
}

/* Broadcast Message */
message BroadcastMsg {
  string origServerId = 1;
  int32 pendingReqId = 2;
  string idempotency_key = 3;
  int64 assigned_timestamp = 4;
  oneof packet {
      TransactionMsg transaction = 5;
      TransactionHistoryMsg transactions_list = 6;
      int32 limit = 7;
  }
}